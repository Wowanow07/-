
1. Умовний оператор
Умовний оператор використовується для перевірки певної умови та виконання дій залежно від того, істинна ця умова чи ні. 
Це дозволяє програмі приймати рішення в процесі виконання. Наприклад, якщо значення змінної більше певного порогу, виконується один блок дій, інакше — інший.

2. Оператор вибору
Це конструкція, що дозволяє вибрати одну з багатьох можливих дій залежно від значення змінної. На відміну від умовного оператора, який порівнює умови, оператор вибору працює з конкретними значеннями, які можуть бути передбачені заздалегідь. Зручно використовувати, коли є багато варіантів однієї дії.

3. Циклічні оператори
Цикли дозволяють виконувати повторювані дії. Це необхідно тоді, коли потрібно обробити групу даних або повторити операцію кілька разів. Основні види циклів: з передумовою, з післяумовою, та з лічильником. 
Цикли економлять час програміста і дозволяють уникати дублювання коду.

4. Потоки введення та виведення
Це механізми, які забезпечують обмін інформацією між програмою та користувачем або іншими пристроями (файлами, мережею тощо). Потік введення читає дані з джерела, а потік виведення передає результати. Вони працюють за принципом потокового читання/запису інформації, послідовно.

5. Приєднання бібліотек та їх види
Бібліотеки — це готові набори функцій та класів, які можна підключати до програми для розширення її можливостей. Бувають стандартні (входять у мову C++) та зовнішні (додаткові, створені іншими розробниками). Приєднання бібліотеки означає дозвіл програмі використовувати функціональність, яка в ній реалізована.

6. Функції користувача
Це блоки коду, створені програмістом, які виконують певну задачу та можуть бути викликані у будь-якому місці програми. Вони дозволяють структурувати програму, уникати повторення коду та підвищити її зрозумілість і зручність у підтримці.

7. Функції з параметрами
Це функції, яким при виклику передаються значення (аргументи), що використовуються для обчислень або дій усередині функції. Параметри дозволяють зробити функцію гнучкою та універсальною — вона може працювати з різними вхідними даними.

8. Одновимірний масив
Це структура даних, яка зберігає фіксовану кількість елементів одного типу, розміщених у лінійному порядку. До елементів масиву можна звертатися за їхнім порядковим номером (індексом). 
Масиви дозволяють зручно зберігати та обробляти набори даних.

9. Методи сортування масиву
Сортування — це процес упорядкування елементів масиву за зростанням або спаданням. Існують різні алгоритми сортування, які відрізняються складністю, швидкістю роботи та використанням пам’яті. Основні: бульбашкове, вибіркове, вставками, швидке (QuickSort), злиттям (MergeSort).

10. Методи заповнення одновимірного масиву:
- За формулою: заповнення масиву згідно з певним математичним правилом.
- З клавіатури: користувач вводить значення вручну під час виконання програми.
- Випадковим чином: програма автоматично генерує значення у певному діапазоні.

11. Виведення елементів одновимірного масиву
Процес відображення вмісту масиву на екрані або в іншому вихідному джерелі. Це необхідно для перевірки результатів обчислень або взаємодії з користувачем.

12. Оголошення одновимірного масиву
Це процес створення масиву в програмі з визначенням його типу та розміру. Після оголошення програмі доступні комірки пам’яті, де зберігатимуться значення.

13. Оголошення двовимірного масиву
Це створення табличної структури даних, де елементи розміщені у рядках і стовпцях. Такий масив схожий на матрицю та зручний для зберігання інформації у вигляді таблиць.

14. Доступ до елементів двовимірного масиву
Здійснюється через вказування індексу рядка і стовпця. Це дозволяє читати або змінювати значення конкретної комірки масиву.

15. Динамічні масиви та методи їх роботи
Динамічні масиви створюються під час виконання програми, коли розмір масиву заздалегідь невідомий. Вони зберігаються в динамічній пам’яті, яку потрібно вручну виділяти та звільняти. 
Динамічні структури дають більшу гнучкість у роботі з даними.

16. Процедури та методи для обробки рядків
Обробка рядків — це маніпулювання текстовою інформацією: пошук, заміна, розбиття, об’єднання тощо. Існують спеціальні методи, 
які дозволяють працювати з символами та підрядками, визначати довжину, змінювати регістр тощо.

17. Організація структури (запису) та множини
Структура — це користувацький тип даних, який об’єднує кілька змінних різних типів в одну логічну одиницю. Наприклад, структура "Студент" може містити ім’я, вік, оцінки.
Множина — це колекція унікальних елементів, які не повторюються. У програмуванні множини зручно використовувати для перевірки приналежності елементів або видалення дублікатів.

18. Файлові дані
Це інформація, яка зберігається у зовнішніх текстових або бінарних файлах і яку можна зчитувати або записувати з/у програму. Це важливо для збереження результатів роботи програми або зчитування вхідних даних.

19. Відкриття файлу
Перед читанням або записом у файл, його потрібно відкрити — тобто надати програмі доступ до файлу в операційній системі. Це може бути файл для читання або запису.

20. Зчитування даних у файлі
Це процес отримання інформації з файлу — построчно, посимвольно або поблочно. Використовується для аналізу, обробки та виведення даних.

21. Запис даних у файл
Процес виведення інформації з програми у файл. Запис може відбуватися шляхом доповнення наявного файлу або створення нового.

22. Робота з файлами у мові С++ складається з таких етапів:
1. Підключення бібліотеки для файлової роботи.
2. Оголошення об’єкта файлу.
3. Відкриття файлу у відповідному режимі (читання або запис).
4. Читання або запис інформації.
5. Закриття файлу після завершення роботи.

23. Класи та об'єкти
Клас — це шаблон, що описує властивості (дані) та поведінку (методи) об'єктів. Об'єкт — це конкретний представник класу, який містить конкретні значення.
Класи використовуються для організації коду та моделювання реальних об'єктів у програмі. Це основа об'єктно-орієнтованого програмування.
